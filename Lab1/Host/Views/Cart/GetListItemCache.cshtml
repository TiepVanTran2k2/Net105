@using Application.Contracts.Dtos.Product
@using Domain.EnumStatus
@using Microsoft.AspNetCore.Identity
@model List<ProductCacheDto>
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@{
    Layout = "_LayoutCart";
}

<section class="h-100 h-custom" style="background-color: #eee;">
  <div class="container py-5 h-100">
    <div class="row d-flex justify-content-center align-items-center h-100">
      <div class="col">
        <div class="card">
          <div class="card-body p-4">

            <div class="row">

              <div class="col-lg-7">
                <h5 class="mb-3"><a href="https://localhost:7071/" class="text-body"><i
                      class="fas fa-long-arrow-alt-left me-2"></i>Continue shopping</a></h5>
                <hr>

                <ul id="listProduct" style="list-style-type: none;">
                    @foreach (var item in Model)
                    {
                      <li id="div_@item.Id">
                          <div class="card mb-3">
                          <div class="card-body">
                            <div class="d-flex justify-content-between">
                              <div class="d-flex flex-row align-items-center">
                                <div>
                                  <img
                                    src="@item.UrlImg"
                                    class="img-fluid rounded-3" alt="Shopping item" style="width: 65px;">
                                </div>
                                <div class="ms-3">
                                  <h5>@item.Name</h5>
                                </div>
                                <div class="ms-3">
                                  <input id="count_@item.Id" min="1" max="10" onchange="changeNumber('@((await UserManager.GetUserAsync(User))?.Id)', '@item.Id', '@item.Price')" style="width: 70px; margin-left: 50px" class="form-control" type="number" value="@item.Count"/>
                                </div>
                              </div>
                              <div class="d-flex flex-row align-items-center">                            
                                <div style="width: 80px;">
                                  @if(item.Status == (int)StatusProductEnum.open)
                                  {
                                      <h6 class="mb-0">Stocking</h6>
                                  }
                                  else{
                                      <h6 class="mb-0">Out Stocking</h6>
                                  }
                                </div>
                                <a href="#!" style="color: #cecece;"><i class="fas fa-trash-alt"></i></a>
                              </div>
                              <div class="d-flex flex-row align-items-center">                            
                                <div style="width: 80px;">
                                  @if(item.Status == (int)StatusProductEnum.open){
                                      <h5 id="price_@item.Id" class="mb-0">@(item.Count * item.Price)$</h5>
                                  }
                                  else{
                                      <h5 id="price_@item.Id" class="mb-0">0$</h5>
                                  }
                                </div>
                                <a href="#!" style="color: #cecece;"><i class="fas fa-trash-alt"></i></a>
                              </div>

                              <div class="d-flex flex-row align-items-center">                            
                            
                                <a class="btn btn-danger"  onclick="cancelProduct('@(UserManager.GetUserId(User) != null ? UserManager.GetUserId(User) : Guid.Empty)', '@item.Id')"><i class="bi bi-x-square-fill"></i></a>
                              </div>
                            </div>
                          </div>
                        </div>
                      </li>
                    }
                </ul>                

              </div>

              <div class="col-lg-5">

                <div class="card bg-primary text-white rounded-3">
                  <div class="card-body">
                    <form asp-controller="Payment" asp-action="CreateUrl" class="mt-4">
                         <div class="form-group">
                            <label for="ordertype">Payments</label>
                            <select id="PaymentOptions" class="form-control">
                                <option value="1">VnPay</option>
                            </select>
                        </div>

                    <hr class="my-4">
                    <input hidden id="User" value="@((await UserManager.GetUserAsync(User))?.Id)"/>
                    <div class="d-flex justify-content-between">
                      <p class="mb-2">Subtotal</p>
                      <p class="mb-2" id="totalDolar">@(Model.Where(x => x.Status == (int)StatusProductEnum.open).Sum(x => x.Price * x.Count))$</p>
                    </div>

                    <button id="checkoutBtn" type="button" class="btn btn-info btn-block btn-lg" onclick="payment('@((await UserManager.GetUserAsync(User))?.Id)')">
                      <div class="d-flex justify-content-between">
                        <span id="txtTotalMoney">@(Model.Where(x => x.Status == (int)StatusProductEnum.open).Sum(x => x.Price * x.Count) * 23000) VNĐ</span>
                      </div>
                    </button>
                    </form>
                  </div>
                </div>

              </div>

            </div>

          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
    var user = document.getElementById("User").value;
    function payment(UserId){
        if (@(Model.Where(x => x.Status == (int)StatusProductEnum.open).Sum(x => x.Price * x.Count) * 23000) <5000) {
            Swal.fire(
            'Warning',
            'Please payment with total money greater than 5000vnđ',
            'warning'
            )
        }
        else 
        {
            var valuePayment = document.getElementById('PaymentOptions').value;
            console.log(valuePayment);
            console.log(UserId);
            var model = {
                "OrderType": "Digital",
                "OrderDescription": ""+UserId,
                "Name": "UserId:",
                "Amount": @(Model.Where(x => x.Status == (int)StatusProductEnum.open).Sum(x => x.Price * x.Count)),
                "User": UserId
            }
            console.log(model);
            $.ajax({
                url: '/Payment/CreateUrl',
                type: 'POST',
                data: model,
                success: successFunc,
                error: errorFunc
            });

            function successFunc(data, status) {
                window.location = data.responseText;
            }
            function errorFunc(data, status) {
                if (data.status == 401) {
                    window.location = "/Account/Login";
                }
                else 
                {
                    Swal.fire(
                        'Error',
                        'Error system',
                        'error'
                        )
                }
            }
        }
};
function changeNumber(userId, productId, price) {
    var value = document.getElementById('count_' + productId).value;
    document.getElementById('price_' + productId).innerHTML = (price * value).toFixed(2)+'$';
    var dataChange = {
        "UserId": userId,
        "ProductId": productId,
        "Count": value
    };
    $.ajax({
        type: "POST",
        url: "/Cart/ChangeCountProductCache",
        data: dataChange,
        success: successFuncChangeCount
    });
    function successFuncChangeCount(data, status) 
    {
        if (data != null) 
        {
            let totalMoney = 0;
            for (let item in data.listProductCache) 
            {
                if (data.listProductCache[item].status == 0) 
                {
                    totalMoney += data.listProductCache[item].count *  data.listProductCache[item].price
                }
            }
            document.getElementById("txtTotalMoney").innerHTML = (totalMoney*23000).toFixed(2)+" VNĐ"
        }
    }    
}
function cancelProduct(userId, productId) 
{
    
    var dataRemove = {
        "Key": userId,
        "ProductId": productId
    };
    $.ajax({
        type: "POST",
        url: "/Cart/RemoveProductCache",
        data: dataRemove,
        success: successRemoveItem
    });
    function successRemoveItem(data, status) {
        var listProduct = document.getElementById("listProduct");
        var li = "div_" + productId;
        var product = document.getElementById(li);
        listProduct.removeChild(product);
        console.log(data);
        let totalMoney = 0;
        for (let item in data) 
        {
            if (data[item].status == 0) 
            {
               totalMoney += data[item].count *  data[item].price
            }       
        }    
        document.getElementById("txtTotalMoney").innerHTML = (totalMoney*23000).toFixed(2)+" VNĐ";
        document.getElementById("totalDolar").innerHTML = totalMoney.toFixed(2)+"$";
    }
}
</script>